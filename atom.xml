<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Joy Lobo随笔</title>
  
  <subtitle>What I cannot create, I do not understand - Richard Feynman</subtitle>
  <link href="https://joylobo.github.io/atom.xml" rel="self"/>
  
  <link href="https://joylobo.github.io/"/>
  <updated>2021-03-23T12:43:56.584Z</updated>
  <id>https://joylobo.github.io/</id>
  
  <author>
    <name>Joy Lobo</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>docker</title>
    <link href="https://joylobo.github.io/2021/03/23/docker/"/>
    <id>https://joylobo.github.io/2021/03/23/docker/</id>
    <published>2021-03-23T08:06:26.000Z</published>
    <updated>2021-03-23T12:43:56.584Z</updated>
    
    <content type="html"><![CDATA[<p>容器核心:cgroups</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;容器核心:cgroups&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>mysql-lock</title>
    <link href="https://joylobo.github.io/2021/03/23/mysql-lock/"/>
    <id>https://joylobo.github.io/2021/03/23/mysql-lock/</id>
    <published>2021-03-23T08:06:17.000Z</published>
    <updated>2021-03-23T12:43:56.680Z</updated>
    
    
    
    
    
  </entry>
  
  <entry>
    <title>MySQL索引</title>
    <link href="https://joylobo.github.io/2021/03/04/mysql-index/"/>
    <id>https://joylobo.github.io/2021/03/04/mysql-index/</id>
    <published>2021-03-04T02:29:44.000Z</published>
    <updated>2021-03-23T12:43:56.680Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p><strong>索引</strong>是帮助MySQL高效获取数据的<strong>排好序</strong>的<strong>数据结构</strong>, 索引存储在文件里。</p><h2 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h2><p>磁盘寻道和旋转</p><h3 id="索引结构"><a href="#索引结构" class="headerlink" title="索引结构"></a>索引结构</h3><p><a href="https://www.cs.usfca.edu/~galles/visualization/Algorithms.html">https://www.cs.usfca.edu/~galles/visualization/Algorithms.html</a><br>二叉树 ==&gt; 红黑树 ==&gt; btree ==&gt; b+tree<br>hash</p><h3 id="聚簇与非聚簇表"><a href="#聚簇与非聚簇表" class="headerlink" title="聚簇与非聚簇表"></a>聚簇与非聚簇表</h3><p><img src="/.io//clustered-index-vs-non-clustered-index.png" alt="索引"></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><h3 id="MySQL为什么用自增主键"><a href="#MySQL为什么用自增主键" class="headerlink" title="MySQL为什么用自增主键"></a>MySQL为什么用自增主键</h3><ol><li>省空间(非叶子节点能够存更多条)</li><li>数字比较比字符串比较快</li><li>如果碰到不规则数据插入时，为了保持B+树的平衡，会造成频繁的页分裂和页旋转，插入速度比较慢。所以聚簇索引的主键值应尽量是连续增长的值，而不是随机值(不要用随机字符串或UUID)。</li></ol><h3 id="分析一下几条sql的索引使用情况"><a href="#分析一下几条sql的索引使用情况" class="headerlink" title="分析一下几条sql的索引使用情况"></a>分析一下几条sql的索引使用情况</h3><table><thead><tr><th>Table</th><th>Non_unique</th><th>Key_name</th><th>Seq_in_index</th><th>Column_name</th><th>Collation</th><th>Cardinality</th><th>Null</th><th>Index_type</th></tr></thead><tbody><tr><td>titles</td><td>0</td><td>PRIMARY</td><td>1</td><td>emp_no</td><td>A</td><td>NULL</td><td></td><td>BTREE</td></tr><tr><td>titles</td><td>0</td><td>PRIMARY</td><td>2</td><td>title</td><td>A</td><td>NULL</td><td></td><td>BTREE</td></tr><tr><td>titles</td><td>0</td><td>PRIMARY</td><td>3</td><td>from_date</td><td>A</td><td>443308</td><td></td><td>BTREE</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line">    <span class="keyword">FROM</span> titles </span><br><span class="line">    <span class="keyword">WHERE</span> emp_no = <span class="string">&#x27;1001&#x27;</span> <span class="keyword">AND</span> title = <span class="string">&#x27;Senior Engineer&#x27;</span> <span class="keyword">AND</span> from_date = <span class="string">&#x27;1986-06-26&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line">    <span class="keyword">FROM</span> titles </span><br><span class="line">    <span class="keyword">WHERE</span> title = <span class="string">&#x27;Senior Engineer&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line">    <span class="keyword">FROM</span> titles </span><br><span class="line">    <span class="keyword">WHERE</span> emp_no &gt; <span class="string">&#x27;1001&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">SELECT</span> * </span><br><span class="line">    <span class="keyword">FROM</span> titles </span><br><span class="line">    <span class="keyword">WHERE</span> emp_no &gt; <span class="string">&#x27;1001&#x27;</span> <span class="keyword">ORDER</span> <span class="keyword">BY</span> title;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;索引&lt;/strong&gt;是帮助MySQL高效获取数据的&lt;strong&gt;排好序&lt;/strong&gt;的&lt;strong&gt;数据结构&lt;/s</summary>
      
    
    
    
    
    <category term="mysql" scheme="https://joylobo.github.io/tags/mysql/"/>
    
    <category term="数据库" scheme="https://joylobo.github.io/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="https://joylobo.github.io/2021/03/04/git/"/>
    <id>https://joylobo.github.io/2021/03/04/git/</id>
    <published>2021-03-04T02:27:33.000Z</published>
    <updated>2021-03-23T12:43:56.584Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Git是一个分布式版本控制系统(DVCS), 它可以跟踪文件的更改，并且可以恢复到任何特定版本的更改。Git项目主页: <a href="https://git-scm.com/%E3%80%82">https://git-scm.com/。</a></p><h2 id="入门篇"><a href="#入门篇" class="headerlink" title="入门篇"></a>入门篇</h2><h3 id="Git仓库的新建-克隆"><a href="#Git仓库的新建-克隆" class="headerlink" title="Git仓库的新建/克隆"></a>Git仓库的新建/克隆</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git init                                         <span class="comment"># 在当前目录新建一个Git仓库</span></span><br><span class="line">git init [project-name]                          <span class="comment"># 新建一个目录，将其初始化为Git仓库</span></span><br><span class="line">git <span class="built_in">clone</span> &lt;remote_url&gt;                           <span class="comment"># 下载一个项目和它的整个代码历史</span></span><br></pre></td></tr></table></figure><h3 id="添加修改到暂存区"><a href="#添加修改到暂存区" class="headerlink" title="添加修改到暂存区"></a>添加修改到暂存区</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt;                               <span class="comment"># 将对文件的修改添加到暂存区</span></span><br><span class="line">git add &lt;directory&gt;                              <span class="comment"># 将对文件夹的修改添加到暂存区</span></span><br><span class="line">git add --all                                    <span class="comment"># 将所有的修改添加到暂存区</span></span><br><span class="line">git rm -cached target [-r]                       <span class="comment"># 从暂存区删除文件</span></span><br></pre></td></tr></table></figure><h3 id="提交修改"><a href="#提交修改" class="headerlink" title="提交修改"></a>提交修改</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git commit &lt;filename&gt; -m <span class="string">&quot;提交日志&quot;</span>               <span class="comment"># 提交指定文件</span></span><br><span class="line">git commit -m <span class="string">&quot;提交日志&quot;</span>                            </span><br><span class="line">git commit -am <span class="string">&quot;添加并提交&quot;</span></span><br><span class="line">git revert &lt;commit id&gt;                           <span class="comment"># 创建一个新的提交，撤消错误提交中所做的更改</span></span><br></pre></td></tr></table></figure><h3 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git branch [-avv]                                <span class="comment"># 查看当前分支</span></span><br><span class="line">git branch &lt;branch name&gt;                         <span class="comment"># 基于当前分支新建分支, 如:git branch dev </span></span><br><span class="line">git branch &lt;branch name&gt; &lt;soure branch&gt;          <span class="comment"># 基于指定分支新建分支, 如:git branch dev master</span></span><br><span class="line">git branch &lt;branch name&gt; &lt;remote branch&gt;         <span class="comment"># 基于远程分支新建分支, 如:git branch dev origin/master</span></span><br><span class="line">git branch &lt;branch name&gt; &lt;commit id&gt;             <span class="comment"># 基于提交新建分支</span></span><br><span class="line">git branch &lt;branch name&gt; &lt;tag id&gt;                <span class="comment"># 基于tag新建分支</span></span><br><span class="line">git branch -d &lt;branch name&gt;                      <span class="comment"># 删除分支</span></span><br><span class="line">git checkout &lt;branch name&gt;                       <span class="comment"># 切换分支</span></span><br><span class="line">git merge &lt;merge target&gt;                         <span class="comment"># 合并分支, 当出现冲突时需解决后再提交</span></span><br></pre></td></tr></table></figure><h3 id="Tag管理"><a href="#Tag管理" class="headerlink" title="Tag管理"></a>Tag管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git tag</span><br><span class="line">git tag &lt;tag name&gt; &lt;branch name&gt;</span><br><span class="line">git tag -d &lt;tag name&gt;</span><br></pre></td></tr></table></figure><h3 id="推送提交到远程"><a href="#推送提交到远程" class="headerlink" title="推送提交到远程"></a>推送提交到远程</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git remote -v                                    <span class="comment"># 查看远程仓库</span></span><br><span class="line">git remote add origin &lt;url&gt;                      <span class="comment"># 添加远程仓库地址</span></span><br><span class="line">git remote remove origin                         <span class="comment"># 删除origin对应的远程仓库</span></span><br><span class="line"></span><br><span class="line">git push</span><br><span class="line">git push --set-upstream origin master</span><br></pre></td></tr></table></figure><h3 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span>                                          <span class="comment"># 查看当前分支的提交日志</span></span><br><span class="line">git <span class="built_in">log</span> &lt;branch name&gt;                            <span class="comment"># 查看指定分支的提交日志</span></span><br><span class="line">git <span class="built_in">log</span> --oneline                                <span class="comment"># 单行显示提交日志</span></span><br><span class="line">git <span class="built_in">log</span> master..dev                              <span class="comment"># 比较两个版本的区别</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=format:<span class="string">&#x27;%h %s&#x27;</span> --graph          <span class="comment"># 以图表的方式显示提交合并网络</span></span><br><span class="line">git show &lt;branch name&gt;</span><br></pre></td></tr></table></figure><h2 id="进阶篇"><a href="#进阶篇" class="headerlink" title="进阶篇"></a>进阶篇</h2><h3 id="Git-内部原理-Git-对象"><a href="#Git-内部原理-Git-对象" class="headerlink" title="Git 内部原理 - Git 对象"></a><a href="https://git-scm.com/book/zh/v2/Git-%E5%86%85%E9%83%A8%E5%8E%9F%E7%90%86-Git-%E5%AF%B9%E8%B1%A1">Git 内部原理 - Git 对象</a></h3><p><strong>Git存储对象</strong><br>Git是一个内容寻址文件系统，其核心部分是一个简单的键值对数据库(key-value data store)，你可以向数据库中插入任何内容，它会返回一个用户取回该键值的hash键。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git hash-object -w README.md                     <span class="comment"># 元数据存储在.git/objects/目录</span></span><br><span class="line">git cat-file -p [id]</span><br></pre></td></tr></table></figure><p><strong>Git树对象</strong><br>它能解决文件名保存的问题，也允许我们将多个文件组织到一起。<br><strong>Git提交对象</strong><br><strong>Git引用</strong></p><h2 id="FAQ"><a href="#FAQ" class="headerlink" title="FAQ"></a>FAQ</h2><p><strong><a href="https://segmentfault.com/a/1190000019315509">关于 Git 的 20 个面试题</a></strong></p><h3 id="Git与svn的区别"><a href="#Git与svn的区别" class="headerlink" title="Git与svn的区别?"></a>Git与svn的区别?</h3><p><strong>存储方式不同</strong><br>Git采用元数据的方式存储，svn采用文件的方式（新版本已改为元数据）。<br>可以理解为svn存储的是整个文件，而git是将文件内容存储到数据库<br><strong>使用方式不同</strong><br>从本地把文件提交到远程，svn只需要commit，git则需要add、commit、push三个步骤<br><strong>管理模式不同</strong><br>git是分布式的，svn是集中式的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;p&gt;Git是一个分布式版本控制系统(DVCS), 它可以跟踪文件的更改，并且可以恢复到任何特定版本的更改。Git项目主页: &lt;a href=&quot;h</summary>
      
    
    
    
    
    <category term="git" scheme="https://joylobo.github.io/tags/git/"/>
    
    <category term="github" scheme="https://joylobo.github.io/tags/github/"/>
    
    <category term="版本管理" scheme="https://joylobo.github.io/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Redis</title>
    <link href="https://joylobo.github.io/2021/03/04/redis/"/>
    <id>https://joylobo.github.io/2021/03/04/redis/</id>
    <published>2021-03-04T02:27:02.000Z</published>
    <updated>2021-03-23T12:43:56.680Z</updated>
    
    
    
    
    
    <category term="中间件" scheme="https://joylobo.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="缓存" scheme="https://joylobo.github.io/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes</title>
    <link href="https://joylobo.github.io/2021/03/04/kubernetes/"/>
    <id>https://joylobo.github.io/2021/03/04/kubernetes/</id>
    <published>2021-03-04T02:26:05.000Z</published>
    <updated>2021-03-23T12:43:56.680Z</updated>
    
    
    
    
    
    <category term="容器编排" scheme="https://joylobo.github.io/tags/%E5%AE%B9%E5%99%A8%E7%BC%96%E6%8E%92/"/>
    
    <category term="k8s" scheme="https://joylobo.github.io/tags/k8s/"/>
    
    <category term="kubernetes" scheme="https://joylobo.github.io/tags/kubernetes/"/>
    
  </entry>
  
  <entry>
    <title>Nginx学习笔记</title>
    <link href="https://joylobo.github.io/2021/03/04/nginx/"/>
    <id>https://joylobo.github.io/2021/03/04/nginx/</id>
    <published>2021-03-04T02:18:38.000Z</published>
    <updated>2021-03-23T12:43:56.680Z</updated>
    
    <content type="html"><![CDATA[    <style type="text/css">        table > thead > tr > th:nth-child(1) {            width: 250px;        }    </style><h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Nginx服务器以其功能丰富著称于世。它既可以作为HTTP服务器，也可以作为反向代理服务器或者邮件服务器；能够快速响应静态页面(HTML)的请求;支持FastCGI、SSL、Virtual Host、URL Rewrite、HTTP Basic Auth、Gzip等大量实用功能；并支持更多的第三方功能模块的扩展。</p><h2 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h2><h3 id="基本HTTP服务"><a href="#基本HTTP服务" class="headerlink" title="基本HTTP服务"></a>基本HTTP服务</h3><p>在Nginx提供的基本HTTP服务组件中，主要包含以下功能特性：</p><ul><li>处理静态文件(如HTML静态网页及请求);处理索引文件以及支持自动索引。</li><li>打开并自行管理文件描述符缓存。</li><li>提供反向代理服务，并且可以使用缓存加速反向代理，同时完成简单负载均衡及容错。</li><li>提供远程FastCGI服务的缓存机制，加速访问，同时完成简单的负载均衡及容错。</li><li>使用Nginx的模块化特性提供过滤器功能。Nginx基本过滤器包括gzip压缩、ranges支持、chunked响应，XSLT、SSI以及图像缩放等。其中，针对包含多个SSI的页面，经由FastCGI或反向代理，SSI过滤器可以并行处理。</li><li>支持HTTP下的安全套接层安全协议SSL。</li></ul><h3 id="高级HTTP服务"><a href="#高级HTTP服务" class="headerlink" title="高级HTTP服务"></a>高级HTTP服务</h3><p>在Nginx提供的高级HTTP服务中，主要包含以下功能特性：</p><ul><li>支持基于名字和IP的虚拟主机设置。</li><li>支持HTTP/1.0中KEEP-ALIVE模式和管线(PipeLined)模型连接。</li><li>支持重新加载配置以及在线升级时，无需中断正在处理的请求。</li><li>自定义访问日志格式、带缓存的日志写操作以及快速日志轮转。</li><li>提供3xx~5xx错误代码重定向功能。</li><li>支持重写(Rewrite)模块扩展。</li><li>支持HTTP DAV模块，从而为HTTP WebDAV提供PUT、DELETE、MKCOL、COPY已经MOVE方法。</li><li>支持FLV流和MP4流传输。</li><li>支持网络监控，包括基于客户端IP地址和HTTP基本认证机制的访问控制、速度限制、来自同一地址的同时连接数或请求数限制等。</li><li>支持嵌入Perl语言。</li></ul><h3 id="邮件代理服务"><a href="#邮件代理服务" class="headerlink" title="邮件代理服务"></a>邮件代理服务</h3><p>Nginx提供邮件代理服务也是其基本开发需求之一，主要包含以下功能特性：</p><ul><li>支持使用外部HTTP认证服务器重定向用户到IMAP/POP3后端，并支持IMAP认证方式(LOGIN、AUTH LOGIN/CRAM-MD5)和POP3认证方式(USER/PASS、APOP、AUTH LOGIN/PLAIN/CRAM-MD5)。</li><li>支持使用外部HTTP认证服务器认证用户重定向连接到内部SMTP后端，并支持SMTP认证方式(AUTH LOGIN/PLAIN/CRAM-MD5)。</li><li>支持邮件代理服务下的安全套接层协议SSL。</li><li>支持纯文本通信协议的扩展协议STARTTLS。</li></ul><h2 id="常用功能介绍"><a href="#常用功能介绍" class="headerlink" title="常用功能介绍"></a>常用功能介绍</h2><h3 id="HTTPS代理和反向代理"><a href="#HTTPS代理和反向代理" class="headerlink" title="HTTPS代理和反向代理"></a>HTTPS代理和反向代理</h3><p>代理服务和反向代理服务是Nginx服务器作为Web服务器的主要功能之一，尤其是反向代理服务，是应用十分广泛的功能。在提供反向代理服务方面，Nginx服务器转发前端请求性能稳定，并且后端转发与业务配置相互分离，配置相当灵活。</p><h3 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h3><p>负载均衡，一般包含两方面含义。一方面是，将单一的负载分担到多个网络节点上并行处理，每个节点处理结束后将结果汇总给用户，这样可以大幅提高网络系统的处理能力;第二个方面的含义是，将大量的前端并发访问或数据流量分担到多个后端网络节点处理，这样可以有效减少前端用户等待响应的时间。Web服务器，FTP服务器、企业关键应用服务器等网络应用方面谈到的负载均衡问题，基本隶属于后一方面的含义。</p><h3 id="Web缓存"><a href="#Web缓存" class="headerlink" title="Web缓存"></a>Web缓存</h3><p>Nginx服务器的Web缓存服务主要由Proxy_Cache相关指令集和FastCGI相关指令集构成。其中，Proxy_Cache主要用于在Nginx服务器提供反向代理服务时，对后端源服务器的返回内容进行URL缓存;FastCGI_Cache主要用于对FastCGI的动态程序进行缓存。另外还有一款常用的第三方模块ngx_cache_purge也是Nginx服务器Web缓存功能中常用到的。它主要用于清除Nginx服务上指定的URL缓存。</p><h1 id="安装和配置"><a href="#安装和配置" class="headerlink" title="安装和配置"></a>安装和配置</h1><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><table><thead><tr><th>选项</th><th>说明</th></tr></thead><tbody><tr><td>–prefix=&lt;path&gt;</td><td>指定Nginx软件的安装路径，默认为/usr/local/nginx/目录</td></tr><tr><td>–sbin-path=&lt;path&gt;</td><td>指定Nginx可执行文件的安装路径，默认为&lt;prefix&gt;/sbin/nginx/目录。</td></tr><tr><td>–config-path=&lt;path&gt;</td><td>在未给定-c选项下，指定默认的nginx.conf路径，默认为&lt;prefix&gt;/conf/目录。</td></tr><tr><td>–pid-path=&lt;path&gt;</td><td>在nginx.conf中未指定pid指令的情况下，指定默认的nginx.pid路径，默认为&lt;prefix&gt;/logs/nginx.pid。nginx.pid保存了当前运行的Nginx服务的进程号</td></tr><tr><td>–lock-path=&lt;path&gt;</td><td>指定nginx.lock文件的路径，默认为/var/lock/目录。nginx.lock是Nginx服务器的锁文件。</td></tr><tr><td>–error-log-path=&lt;path&gt;</td><td>在nginx.conf中未指定error_log的情况下，指定默认的错误日志的路径，默认为&lt;prefix&gt;/logs/error.log</td></tr><tr><td>–http-log-path=&lt;path&gt;</td><td>在nginx.conf中未指定access_log指令的情况下，指定默认的访问日志路径，默认为&lt;prefix&gt;/logs/access.log</td></tr><tr><td>–user=&lt;user&gt;</td><td>在nginx.conf中未指定user指令的情况下，指定默认的Nginx服务器进程的属主用户，即Nginx进程运行的用户。可以理解为指定哪个用户启动Nginx，默认为nobody，表示不限制</td></tr><tr><td>–group=&lt;group&gt;</td><td>在nginx.conf中未指定user指令的情况下，指定默认的Nginx服务器进程的属主用户组，即Nginx进程运行的用户组。可以理解为指定哪个用户组的用户启动Nginx，默认为nobody，表示不限制</td></tr><tr><td>–builddir=&lt;dir&gt;</td><td>指定编译时的目录</td></tr><tr><td>–with-debug</td><td>声明启用Nginx的调用日志</td></tr><tr><td>–add-module=&lt;path&gt;</td><td>指定第三方模块的路径，用以编译到Nginx服务器中。</td></tr><tr><td>–with-poll_module</td><td>声明启用poll模块，poll模块是信号处理的一种方法，和下面提到的select模式类似，都是采用轮训方法处理信号</td></tr><tr><td>–without-poll_module</td><td>声明禁止poll模块</td></tr><tr><td>–with-select_module</td><td>声明启用select信号处理模式，若configure未找到指定其他的信号处理模式(如SUN系统中的kqueue，Linux内核的epoll、实时信号rtsig以及和select类似的/dev/poll等)，则默认使用select模式</td></tr><tr><td>–without-select_module</td><td>声明禁止select信号处理模式</td></tr><tr><td>–with-http_ssl_module</td><td>声明启用HTTP的ssl模块，这样Nginx服务器就可以支持HTTPS请求了，这个模块的正常运行需要安装openssl库</td></tr><tr><td>–with-http_realip_module</td><td>声明启用HTTP的realip模块，默认不启用</td></tr><tr><td>–with-http_addition_module</td><td>声明启用HTTP的addition模块，默认不启用</td></tr><tr><td>–with-http_sub_module</td><td>声明启用HTTP的sub模块，默认不启用</td></tr><tr><td>–with-http_dav_module</td><td>声明启用HTTP的dav模块，默认不启用</td></tr><tr><td>–with-http_flv_module</td><td>声明启用HTTPS的flv模块，默认不启用。flv模块使得Nginx服务器支持flv流媒体的传输</td></tr><tr><td>–with-http_stub_status_module</td><td>声明启用Server Status页，默认不启用</td></tr><tr><td>–with-http_perl_module</td><td>声明启用HTTP的perl模块，默认不启用。perl模块使得Nginx服务器支持perl脚本的运行</td></tr><tr><td>–with-perl_modules_path=&lt;path&gt;</td><td>指定perl模块的路径</td></tr><tr><td>–with-perl=&lt;path&gt;</td><td>指定perl执行文件的路径</td></tr><tr><td>–without-http_charset_module</td><td>声明禁止HTTP的charset模块，默认启用</td></tr><tr><td>–without-http_gzip_module</td><td>声明禁用HTTP的gzip模块，默认启用。使用gzip模块需要安装zlib库</td></tr><tr><td>–without-http_ssi_module</td><td>声明禁用HTTP的ssi模块，默认启用</td></tr><tr><td>–without-http_userid_module</td><td>声明禁用HTTP的userid模块，默认启用</td></tr><tr><td>–without-http_access_module</td><td>声明禁用HTTP的access模块， 默认启用</td></tr><tr><td>–without-http_auth_basic_module</td><td>声明禁用HTTP的auth basic模块，默认启用</td></tr><tr><td>–without-http_autoindex_module</td><td>声明禁用HTTP的autoindex模块，默认启用</td></tr><tr><td>–without-http_geo_module</td><td>声明禁用HTTP的geo模块，默认启用</td></tr><tr><td>–without-http_map_module</td><td>声明禁用HTTP的map模块，默认启用</td></tr><tr><td>–without-http_referer_module</td><td>声明禁用HTTP的referer模块，默认启用</td></tr><tr><td>–without-http_rewrite_module</td><td>声明禁用HTTP的rewrite模块，默认启用。使用rewrite模块需要安装pcre库</td></tr><tr><td>–without-http_proxy_module</td><td>声明禁用HTTP的proxy模块，默认启用</td></tr><tr><td>–without-http_fastcgi_module</td><td>声明禁用HTTP的fastcgi模块，默认启用</td></tr><tr><td>–without-http_memcached_module</td><td>声明禁用HTTP的memcached模块，默认启用</td></tr></tbody></table><h3 id="启动和停止"><a href="#启动和停止" class="headerlink" title="启动和停止"></a>启动和停止</h3><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3>]]></content>
    
    
      
      
    <summary type="html">
    &lt;style type=&quot;text/css&quot;&gt;
        table &gt; thead &gt; tr &gt; th:nth-child(1) {
            width: 250px;
        }
    &lt;/style&gt;


&lt;h1 id=&quot;简介&quot;&gt;&lt;</summary>
      
    
    
    
    
    <category term="中间件" scheme="https://joylobo.github.io/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
    <category term="反向代理" scheme="https://joylobo.github.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
    <category term="负载均衡" scheme="https://joylobo.github.io/tags/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1/"/>
    
  </entry>
  
  <entry>
    <title>Leet-code(力扣)题解</title>
    <link href="https://joylobo.github.io/2021/03/03/leet-code/"/>
    <id>https://joylobo.github.io/2021/03/03/leet-code/</id>
    <published>2021-03-03T06:22:40.000Z</published>
    <updated>2021-03-23T12:43:56.680Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-两数之和"><a href="#1-两数之和" class="headerlink" title="1. 两数之和"></a>1. 两数之和</h1><!-- 2021/03/03 --><p>给定一个整数数组 nums 和一个整数目标值 target，请你在该数组中找出 和为目标值 的那 两个 整数，并返回它们的数组下标。<br>你可以假设每种输入只会对应一个答案。但是，数组中同一个元素不能使用两遍。<br>你可以按任意顺序返回答案。  </p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入:nums &#x3D; [2,7,11,15], target &#x3D; 9</span><br><span class="line">输出:[0,1]</span><br><span class="line">解释:因为 nums[0] + nums[1] &#x3D;&#x3D; 9 ，返回 [0, 1]</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:nums &#x3D; [3,2,4], target &#x3D; 6</span><br><span class="line">输出:[1,2]</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:nums &#x3D; [3,3], target &#x3D; 6</span><br><span class="line">输出:[0,1]</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li>2 &lt;= nums.length &lt;= 103</li><li>-109 &lt;= nums[i] &lt;= 109</li><li>-109 &lt;= target &lt;= 109</li><li>只会存在一个有效答案</li></ul><p><strong>解答:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number[]&#125;</span> <span class="variable">nums</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">target</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> MAP = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">    MAP.set(nums[<span class="number">0</span>], <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> other = target - nums[i];</span><br><span class="line">        <span class="keyword">if</span> (MAP.get(other) !== <span class="literal">undefined</span>) <span class="keyword">return</span> [MAP.get(other), i];</span><br><span class="line">        MAP.set(nums[i], i)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2-两数相加"><a href="#2-两数相加" class="headerlink" title="2. 两数相加"></a>2. 两数相加</h1><!-- 2021/03/03 --><p>给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。<br>请你将两个数相加，并以相同形式返回一个表示和的链表。<br>你可以假设除了数字 0 之外，这两个数都不会以 0 开头。  </p><p><strong>示例 1:</strong></p><p><img src="/.io//addtwonumber1.jpg" alt="示例 1"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入:l1 &#x3D; [2,4,3], l2 &#x3D; [5,6,4]</span><br><span class="line">输出:[7,0,8]</span><br><span class="line">解释:342 + 465 &#x3D; 807.</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:l1 &#x3D; [0], l2 &#x3D; [0]</span><br><span class="line">输出:[0]</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入:l1 &#x3D; [9,9,9,9,9,9,9], l2 &#x3D; [9,9,9,9]</span><br><span class="line">输出:[8,9,9,9,0,0,0,1]</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li>每个链表中的节点数在范围 [1, 100] 内</li><li>0 &lt;= Node.val &lt;= 9</li><li>题目数据保证列表表示的数字不含前导零</li></ul><p><strong>解答:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Definition for singly-linked list.</span></span><br><span class="line"><span class="comment"> * function ListNode(val, next) &#123;</span></span><br><span class="line"><span class="comment"> *     this.val = (val===undefined ? 0 : val)</span></span><br><span class="line"><span class="comment"> *     this.next = (next===undefined ? null : next)</span></span><br><span class="line"><span class="comment"> * &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l1</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;ListNode&#125;</span> <span class="variable">l2</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;ListNode&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> addTwoNumbers = <span class="function"><span class="keyword">function</span>(<span class="params">l1, l2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> head = <span class="keyword">new</span> ListNode(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">let</span> tmp = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> pos = head</span><br><span class="line">    <span class="keyword">while</span> (l1 || l2 || tmp !== <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> sum = ((l1 ? l1.val : <span class="number">0</span>) + (l2 ? l2.val : <span class="number">0</span>) + tmp)</span><br><span class="line">        tmp = <span class="built_in">Math</span>.floor(sum / <span class="number">10</span>)</span><br><span class="line">        pos.next = <span class="keyword">new</span> ListNode(sum % <span class="number">10</span>)</span><br><span class="line">        pos = pos.next</span><br><span class="line">        <span class="keyword">if</span> (l1) l1 = l1.next</span><br><span class="line">        <span class="keyword">if</span> (l2) l2 = l2.next</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> head.next</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3. 无重复字符的最长子串"></a>3. 无重复字符的最长子串</h1><!-- 2021/03/03 --><p>给定一个字符串，请你找出其中不含有重复字符的 最长子串 的长度。</p><p><strong>示例 1:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;abcabcbb&quot;</span><br><span class="line">输出: 3 </span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;abc&quot;，所以其长度为 3。</span><br></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;bbbbb&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;b&quot;，所以其长度为 1。</span><br></pre></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;pwwkew&quot;</span><br><span class="line">输出: 3</span><br><span class="line">解释: 因为无重复字符的最长子串是 &quot;wke&quot;，所以其长度为 3。</span><br><span class="line">     请注意，你的答案必须是 子串 的长度，&quot;pwke&quot; 是一个子序列，不是子串。</span><br></pre></td></tr></table></figure><p><strong>示例 4:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s &#x3D; &quot;&quot;</span><br><span class="line">输出: 0</span><br></pre></td></tr></table></figure><p><strong>提示:</strong></p><ul><li>0 &lt;= s.length &lt;= 5 * 104</li><li>s 由英文字母、数字、符号和空格组成</li></ul><p><strong>解答:</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;string&#125;</span> <span class="variable">s</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> lengthOfLongestSubstring = <span class="function"><span class="keyword">function</span>(<span class="params">s</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> kvStore = <span class="keyword">new</span> <span class="built_in">Map</span>()</span><br><span class="line">    <span class="keyword">let</span> cur = <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> max = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> arr = s.split(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (kvStore.get(arr[i]) &gt;= cur) &#123;</span><br><span class="line">            cur = kvStore.get(arr[i]) + <span class="number">1</span></span><br><span class="line">        &#125; </span><br><span class="line">        </span><br><span class="line">        max = i - cur + <span class="number">1</span>&gt; max ? i - cur + <span class="number">1</span> : max</span><br><span class="line">        kvStore.set(arr[i], i)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> max</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-两数之和&quot;&gt;&lt;a href=&quot;#1-两数之和&quot; class=&quot;headerlink&quot; title=&quot;1. 两数之和&quot;&gt;&lt;/a&gt;1. 两数之和&lt;/h1&gt;&lt;!-- 2021/03/03 --&gt;
&lt;p&gt;给定一个整数数组 nums 和一个整数目标值 target，请你</summary>
      
    
    
    
    
    <category term="算法" scheme="https://joylobo.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
</feed>
